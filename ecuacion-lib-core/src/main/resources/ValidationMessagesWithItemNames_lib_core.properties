# jakarta validation standard messages
jakarta.validation.constraints.AssertFalse.message.default     = "{0}" must be false (input: {invalidValue})
jakarta.validation.constraints.AssertTrue.message.default      = "{0}" must be true (input: {invalidValue})
jakarta.validation.constraints.DecimalMax.message.default      = "{0}" must be less than ${inclusive == true ? 'or equal to ' : ''}{value} (input: {invalidValue})
jakarta.validation.constraints.DecimalMin.message.default      = "{0}" must be greater than ${inclusive == true ? 'or equal to ' : ''}{value} (input: {invalidValue})
jakarta.validation.constraints.Digits.message.default          = "{0}" numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected) (input: {invalidValue})
jakarta.validation.constraints.Email.message.default           = "{0}" must be a well-formed email address (input: {invalidValue})
jakarta.validation.constraints.Future.message.default          = "{0}" must be a future date (input: {invalidValue})
jakarta.validation.constraints.FutureOrPresent.message.default = "{0}" must be a date in the present or in the future (input: {invalidValue})
jakarta.validation.constraints.Max.message.default             = "{0}" must be less than or equal to {value} (input: {invalidValue})
jakarta.validation.constraints.Min.message.default             = "{0}" must be greater than or equal to {value} (input: {invalidValue})
jakarta.validation.constraints.Negative.message.default        = "{0}" must be less than 0 (input: {invalidValue})
jakarta.validation.constraints.NegativeOrZero.message.default  = "{0}" must be less than or equal to 0 (input: {invalidValue})
jakarta.validation.constraints.NotBlank.message.default        = "{0}" must not be blank
jakarta.validation.constraints.NotEmpty.message.default        = "{0}" must not be empty
jakarta.validation.constraints.NotNull.message.default         = "{0}" must not be null (input: {invalidValue})
jakarta.validation.constraints.Null.message.default            = "{0}" must be null (input: {invalidValue})
jakarta.validation.constraints.Past.message.default            = "{0}" must be a past date (input: {invalidValue})
jakarta.validation.constraints.PastOrPresent.message.default   = "{0}" must be a date in the past or in the presentv (input: {invalidValue})
jakarta.validation.constraints.Pattern.message.default         = "{0}" must match "{regexp}" (input: {invalidValue})
jakarta.validation.constraints.Positive.message.default        = "{0}" must be greater than 0 (input: {invalidValue})
jakarta.validation.constraints.PositiveOrZero.message.default  = "{0}" must be greater than or equal to 0 (input: {invalidValue})
jakarta.validation.constraints.Size.message.default            = "{0}"'s size must be between {min} and {max} (input: {invalidValue})

# ecuacion-lib validator messages
jp.ecuacion.validation.constraints.BooleanString.message.default ="{0}" must be a string which expresses boolean ("true", "false", "on", "off", "yes", "no", "t", "f", "y", "n", "\u25CB", "×").  (input: {invalidValue})
jp.ecuacion.validation.constraints.IntegerString.message.default="{0}" must be common sense range integer (input: {invalidValue})
jp.ecuacion.validation.constraints.LongString.message.default="{0}" must be common sense range integer (input: {invalidValue})
jp.ecuacion.validation.constraints.EnumElement.message.default="{0}" must be an enum element of {enumPackage}.{enumClass}. (input: {invalidValue})
jp.ecuacion.validation.constraints.PatternWithDescription.message.default="{0}" must match "{patternDescription}" (input: {invalidValue})
