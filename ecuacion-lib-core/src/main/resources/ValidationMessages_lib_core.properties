# jakarta validation standard messages
jakarta.validation.constraints.AssertFalse.message.default     = must be false
jakarta.validation.constraints.AssertTrue.message.default      = must be true
jakarta.validation.constraints.DecimalMax.message.default      = must be less than ${inclusive == true ? 'or equal to ' : ''}{value}
jakarta.validation.constraints.DecimalMin.message.default      = must be greater than ${inclusive == true ? 'or equal to ' : ''}{value}
jakarta.validation.constraints.Digits.message.default          = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
jakarta.validation.constraints.Email.message.default           = must be a well-formed email address
jakarta.validation.constraints.Future.message.default          = must be a future date
jakarta.validation.constraints.FutureOrPresent.message.default = must be a date in the present or in the future
jakarta.validation.constraints.Max.message.default             = must be less than or equal to {value}
jakarta.validation.constraints.Min.message.default             = must be greater than or equal to {value}
jakarta.validation.constraints.Negative.message.default        = must be less than 0
jakarta.validation.constraints.NegativeOrZero.message.default  = must be less than or equal to 0
jakarta.validation.constraints.NotBlank.message.default        = must not be blank
jakarta.validation.constraints.NotEmpty.message.default        = must not be empty
jakarta.validation.constraints.NotNull.message.default         = must not be null
jakarta.validation.constraints.Null.message.default            = must be null
jakarta.validation.constraints.Past.message.default            = must be a past date
jakarta.validation.constraints.PastOrPresent.message.default   = must be a date in the past or in the present
jakarta.validation.constraints.Pattern.message.default         = must match "{regexp}"
jakarta.validation.constraints.Positive.message.default        = must be greater than 0
jakarta.validation.constraints.PositiveOrZero.message.default  = must be greater than or equal to 0
jakarta.validation.constraints.Size.message.default            = size must be between {min} and {max}

# ecuacion-lib validator messages
jp.ecuacion.validation.constraints.BooleanString.message.default          = must be a string which expresses boolean ("true", "false", "on", "off", "yes", "no", "t", "f", "y", "n", "\u25CB", "×").  (input: {invalidValue})
jp.ecuacion.validation.constraints.IntegerString.message.default          = must be common sense range integer (input: {invalidValue})
jp.ecuacion.validation.constraints.LongString.message.default             = must be common sense range integer (input: {invalidValue})
jp.ecuacion.validation.constraints.EnumElement.message.default            = must be an enum element of {enumPackage}.{enumClass}. (input: {invalidValue})
jp.ecuacion.validation.constraints.PatternWithDescription.message.default = must match "{patternDescription}" (input: {invalidValue})

# ecuacion-lib class validator messages
# * It's not defined in ValidationMessagesWithItemNames_lib_core[_xx].properties because when the key is not found in the file,
#   PropertyFileUtil will find this file then.
jp.ecuacion.validation.constraints.ConditionalEmpty.message.default       = "{fieldDisplayName}" needs to be empty when "{conditionPropertyPathDisplayName}" is {conditionValueDescription}{validatesWhenConditionNotSatisfiedDescription}.
jp.ecuacion.validation.constraints.ConditionalNotEmpty.message.default    = "{fieldDisplayName}" needs to be not empty when "{conditionPropertyPathDisplayName}" is {conditionValueDescription}{validatesWhenConditionNotSatisfiedDescription}.
